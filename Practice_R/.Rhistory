# Install and load Lib
pacman::p_load(rio, ggplot2)
setwd("C:/UEL/RPython/Practice_R")
# Load data
dat <- import("./data/Insurance.csv")
head(dat)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 80%:20%
set.seed(123) # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$dependent_variable, SplitRatio = 0.8)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 80%:20%
set.seed(123) # Đặt seed để kết quả có thể tái tạo
split <- dat.split(dat$dependent_variable, SplitRatio = 0.8)
ample
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 80%:20%
set.seed(123) # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$dependent_variable, SplitRatio = 0.8)
# Install and load Lib
pacman::p_load(rio, ggplot2, caTools)
# Thiết lập đường dẫn làm việc
setwd("C:/UEL/RPython/Practice_R")
# Tải dữ liệu
dat <- import("./data/Insurance.csv")
head(dat)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 80%:20%
set.seed(123) # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$dependent_variable, SplitRatio = 0.8)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
# Thực hiện hồi quy logistic
model <- glm(dependent_variable ~ ., data = train, family = binomial())
# In ra tóm tắt mô hình
summary(model)
# Dự đoán trên tập kiểm tra
predictions <- predict(model, test, type = "response")
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# Tính toán độ chính xác của mô hình
accuracy <- mean(predicted_classes == test$dependent_variable)
print(paste("Accuracy:", accuracy))
# Install and load Lib
pacman::p_load(rio, ggplot2, caTools)
# Thiết lập đường dẫn làm việc
setwd("C:/UEL/RPython/Practice_R")
# Tải dữ liệu
dat <- import("./data/Insurance.csv")
head(dat)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 80%:20%
set.seed(123) # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$dependent_variable, SplitRatio = 0.8)
# Tải dữ liệu
dat <- import("./data/Insurance.csv")
# Install and load Lib
pacman::p_load(rio, ggplot2, caTools)
# Thiết lập đường dẫn làm việc
setwd("C:/UEL/RPython/Practice_R")
# Tải dữ liệu
dat <- import("./data/Insurance.csv")
head(dat)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 80%:20%
set.seed(123) # Đặt seed để kết quả có thể tái tạo
split <- dat.split(dat$dependent_variable, SplitRatio = 0.9)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 80%:20%
set.seed(123) # Đặt seed để kết quả có thể tái tạo
# Tải dữ liệu
dat <- import("./data/Insurance.csv")
head(dat)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 90%:10%
set.seed(123)  # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$bought_insurance, SplitRatio = 0.9)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
# Thực hiện hồi quy logistic
model <- glm(dependent_variable ~ ., data = train, family = binomial())
# Install and load Lib
pacman::p_load(rio, ggplot2, caTools)
# Thiết lập đường dẫn làm việc
setwd("C:/UEL/RPython/Practice_R")
# Tải dữ liệu
dat <- import("./data/Insurance.csv")
head(dat)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 90%:10%
set.seed(123)  # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$bought_insurance, SplitRatio = 0.9)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
# Thực hiện hồi quy logistic
model <- glm(dependent_variable ~ ., data = train, family = binomial())
# In ra tóm tắt mô hình
summary(model)
# Dự đoán trên tập kiểm tra
predictions <- predict(model, test, type = "response")
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# Tính toán độ chính xác của mô hình
accuracy <- mean(predicted_classes == test$dependent_variable)
print(paste("Accuracy:", accuracy))
# Thiết lập đường dẫn làm việc
setwd("C:/UEL/RPython/Practice_R")
# Tải dữ liệu
dat <- import("./data/Insurance.csv")
head(dat)
# Chia dữ liệu thành tập huấn luyện và kiểm tra với tỷ lệ 90%:10%
set.seed(123)  # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$bought_insurance, SplitRatio = 0.9)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
# Thực hiện hồi quy logistic
model <- glm(dependent_variable ~ ., data = train, family = binomial())
# Thực hiện hồi quy logistic
model <- glm('bought_insurance' ~ ., data = train, family = binomial())
# Thực hiện hồi quy logistic
model <- glm('bought_insurance' ~ ., data = train, family = binomial())
# In ra tóm tắt mô hình
summary(model)
X <- dat[,1]
y <- dat[,2]
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
X <- dat[,1]
y <- dat[,2]
# Thực hiện hồi quy logistic
model <- glm(bought_insurance ~ ., data = train, family = binomial())
# Hiển thị kết quả mô hình
summary(model)
# Fit model
model <- glm(bought_insurance ~ ., data = train, family = binomial())
summary(model)
# Predict
predictions <- predict(model, test, type = "response")
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# Test
accuracy <- mean(predicted_classes == test$bought_insurance)
print(paste("Accuracy:", accuracy))
# Split data
set.seed(123)  # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$bought_insurance, SplitRatio = 0.9)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
X <- dat[,1]
y <- dat[,2]
# Fit model
model <- glm(bought_insurance ~ ., data = train, family = binomial())
summary(model)
# Split data
set.seed(123)  # Đặt seed để kết quả có thể tái tạo
split <- sample.split(dat$bought_insurance, SplitRatio = 0.2)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
X <- dat[,1]
y <- dat[,2]
# Fit model
model <- glm(bought_insurance ~ ., data = train, family = binomial())
summary(model)
# Split data
set.seed(1)
split <- sample.split(dat$bought_insurance, SplitRatio = 0.2)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
X <- dat[,1]
y <- dat[,2]
# Fit model
model <- glm(bought_insurance ~ ., data = train, family = binomial())
summary(model)
# Split data
set.seed(12)
split <- sample.split(dat$bought_insurance, SplitRatio = 0.2)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
X <- dat[,1]
y <- dat[,2]
# Fit model
model <- glm(bought_insurance ~ ., data = train, family = binomial())
summary(model)
# Split data
set.seed(123)
split <- sample.split(dat$bought_insurance, SplitRatio = 0.2)
train <- subset(dat, split == TRUE)
test <- subset(dat, split == FALSE)
X <- dat[,1]
y <- dat[,2]
# Fit model
model <- glm(bought_insurance ~ ., data = train, family = binomial())
summary(model)
